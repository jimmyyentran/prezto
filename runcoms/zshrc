#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

SH=$(basename $SHELL)
OS=$(uname)

if type nvim >/dev/null 2>&1; then
    export EDITOR='nvim'
    export VISUAL='nvim'
elif type vim >/dev/null 2>&1; then
    export EDITOR='vim'
    export VISUAL='vim'
else
    export EDITOR='vi'
    export VISUAL='vi'
fi

#######
# ZSH #
#######
if [[ $SH == 'zsh' ]]; then
    if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
        source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
    fi

    # Emacs
    # bindkey -e

    # Vim
    bindkey -v

    ########################
    # Additional functions #
    ########################
    # https://github.com/zsh-users/zsh/blob/ed4e37e45c2f5761981cdc6027a5d6abc753176a/Functions/Zle/surround

    # Enable select-quoted
    autoload -U select-quoted
    zle -N select-quoted
    for m in visual viopp; do
        for c in {a,i}{\',\",\`}; do
        bindkey -M $m $c select-quoted
        done
    done

    # Doesn't work?
    # Enable surround
    autoload -Uz surround
    zle -N delete-surround surround
    zle -N add-surround surround
    zle -N change-surround surround
    bindkey -a cs change-surround
    bindkey -a ds delete-surround
    bindkey -a ys add-surround
    bindkey -M visual S add-surround

    # Enable select-bracketed
    autoload -U select-bracketed
    zle -N select-bracketed
    for m in visual viopp; do
        for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
        bindkey -M $m $c select-bracketed
        done
    done


    bindkey '^P' up-line-or-search
    bindkey '^N' down-line-or-search
    bindkey '^A' beginning-of-line
    bindkey '^E' end-of-line
    bindkey '^?' backward-delete-char
    bindkey '^h' backward-delete-char
    bindkey '^w' backward-kill-word
    bindkey '^r' history-incremental-search-backward
    bindkey '^B' backward-char
    bindkey '^F' forward-char


    export KEYTIMEOUT=1

    alias szsh="source ~/.zshrc"
    alias zrc='~/.dotfiles/zsh/'
    alias zr='$EDITOR ~/.zshrc'
fi

###########
# MAC OSX #
###########
if [[ $OS == 'Darwin' ]]; then
    alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
    alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'
    alias mysql=/usr/local/mysql/bin/mysql
    alias mysqladmin=/usr/local/mysql/bin/mysqladmin
fi

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jimmytran/Downloads/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/jimmytran/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jimmytran/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/jimmytran/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

if [ -d '/Users/jimmytran/.local/powerline/scripts' ]; then
    export PATH=~/.local/powerline/scripts:$PATH
; fi

if [ -d '/usr/local/mysql/bin' ]; then
    export PATH=/usr/local/mysql/bin:$PATH
; fi

#########
# Linux #
#########
if [[ $OS == 'Linux' ]]; then
    alias open='gnome-open'
    alias screenOff='sudo vbetool dpms off'
    alias screenOn='sudo vbetool dpms on'
fi

if type colordiff >/dev/null 2>&1; then
    alias diff='colordiff'
fi

# Virtualenv
export WORKON_HOME=$HOME/.virtualenvs/
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/bin/python3

if [[ -f /usr/local/bin/virtualenvwrapper.sh ]]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

# Sometimes, it's installed in local
if [[ -f ~/.local/bin/virtualenvwrapper.sh ]]; then
    source ~/.local/bin/virtualenvwrapper.sh
fi


#Hierarchy Viewer Variable (Android Studios)
export ANDROID_HVPROTO=ddm
export NODE_PATH=/usr/local/lib/node_modules/
#executable scripts
export set PATH=$PATH:~/Workspace/scripts
#set font for octave-gui
export FONTCONFIG_PATH=/opt/X11/lib/X11/fontconfig
#remove -S flag from zprofile default
export LESS='-F -g -i -M -R -w -X -z-4'
# tabtab source for yo package
# uninstall by removing these lines or running `tabtab uninstall yo`
[[ -f /usr/local/lib/node_modules/yo/node_modules/tabtab/.completions/yo.zsh ]] && . /usr/local/lib/node_modules/yo/node_modules/tabtab/.completions/yo.zsh

# added by Anaconda3 4.4.0 installer
# export PATH="/Users/jimmytran/anaconda3/bin:$PATH"

# Apply these aliases after source init.zsh
alias v='$EDITOR'
alias vr='$EDITOR ~/.vimrc'
alias lt='ls -lAhtr'
alias lz='ls -lAS'
alias q="exit"
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias doc="cd ~/Documents"
alias ws='cd ~/Workspace'
alias make='nocorrect make' #stop make from autocorrecting things
alias gaa='git add -A'
alias ga='git add'
alias gs='git status'
alias gd='git diff'
alias gpull='git pull'
alias gac='git commit -am'
alias pg='ps aux | grep'
alias py=python3
alias ipy=ipython3
alias pipi='pip install'
alias pips='pip show'
alias pipl='pip list'
alias pipu='pip install --upgrade'
alias pipun='pip uninstall'
alias tc='$EDITOR ~/.tmux.conf'
alias ipj='jupyter console --existing'
alias td='tmux detach -a'

########
# CUDA #
########
if [ -d "/usr/local/cuda" ]; then
    export CUDA_HOME=/usr/local/cuda
    export CUDA_ROOT=$CUDA_HOME
    export PATH=$PATH:$CUDA_ROOT/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_ROOT/lib64:$CUDA_ROOT/extras/CUPTI/lib64
fi


# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# Git add, commit, and push the message
gacp(){
    git add -A
    git commit -m $1
    git push
}

grename(){
    git filter-branch -f --env-filter '
    OLD_EMAIL="$1"
    CORRECT_NAME="Jimmy Tran"
    CORRECT_EMAIL=jimmyytran@gmail.com"
    if [ "$GIT_COMMITTER_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_COMMITTER_NAME="$CORRECT_NAME"
        export GIT_COMMITTER_EMAIL="$CORRECT_EMAIL"
    fi
    if [ "$GIT_AUTHOR_EMAIL" = "$OLD_EMAIL" ]
    then
        export GIT_AUTHOR_NAME="$CORRECT_NAME"
        export GIT_AUTHOR_EMAIL="$CORRECT_EMAIL"
    fi
    ' --tag-name-filter cat -- --branches --tags
}

launchctlFind () {
    LaunchctlPATHS=( \
        ~/Library/LaunchAgents \
        /Library/LaunchAgents \
        /Library/LaunchDaemons \
        /System/Library/LaunchAgents \
        /System/Library/LaunchDaemons \
    )

    for curPATH in "${LaunchctlPATHS[@]}"
    do
        grep -r "$curPATH" -e "$1"
    done
    return 0;
}

# optional
# workon crypto
# cd ~/Workspace/crypto
